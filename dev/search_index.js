var documenterSearchIndex = {"docs":
[{"location":"usage/#Converting-between-equivalent-quantities","page":"Converting between equivalent quantities","title":"Converting between equivalent quantities","text":"","category":"section"},{"location":"usage/","page":"Converting between equivalent quantities","title":"Converting between equivalent quantities","text":"This package extends the uconvert and ustrip functions from Unitful.jl to accept an additional argument of type Equivalence. Supplying this argument allows converting between units of different dimensions that are linked by the specified equivalence, e.g., the mass–energy equivalence E=mc^2:","category":"page"},{"location":"usage/","page":"Converting between equivalent quantities","title":"Converting between equivalent quantities","text":"using Unitful, UnitfulEquivalences\nuconvert(u\"keV\", 1u\"me\", MassEnergy()) # electron rest mass is equivalent to ≈511 keV\nustrip(u\"keV\", 1u\"me\", MassEnergy())","category":"page"},{"location":"usage/","page":"Converting between equivalent quantities","title":"Converting between equivalent quantities","text":"The equivalences MassEnergy, Spectral, and Thermal are defined and exported by this package:","category":"page"},{"location":"usage/#UnitfulEquivalences.MassEnergy","page":"Converting between equivalent quantities","title":"UnitfulEquivalences.MassEnergy","text":"MassEnergy()\n\nEquivalence to convert between mass and energy according to the relation E = mc^2, where\n\nE is the energy,\nm is the mass and\nc is the speed of light in vacuum.\n\nExample\n\njulia> uconvert(u\"keV\", 1u\"me\", MassEnergy()) # electron rest mass is equivalent to ≈511 keV\n510.9989499961642 keV\n\n\n\n\n\n","category":"type"},{"location":"usage/#UnitfulEquivalences.Spectral","page":"Converting between equivalent quantities","title":"UnitfulEquivalences.Spectral","text":"Spectral(; frequency=:linear, wavelength=:linear, wavenumber=:linear)\n\nEquivalence that relates the energy of a photon to its (linear or angular) frequency, wavelength, and wavenumber. Whether to convert to linear or angular quantities is determined by optional keyword arguments, :linear is the default for all quantities.\n\nEquivalent quantities are converted according to the relations E = hf = ħω = hcλ = ħcƛ = hcν = ħck, where\n\nE is the photon energy,\nf is the (temporal) frequency (frequency=:linear),\nω is the angular frequency (frequency=:angular),\nλ is the wavelength (wavelength=:linear),\nƛ is the angular (also called reduced) wavelength (wavelength=:angular),\nν is the spectroscopic wavenumber (wavenumber=:linear),\nk is the angular wavenumber (wavelength=:angular),\nh is the Planck constant,\nħ is the reduced Planck constant and\nc is the speed of light in vacuum.\n\nExamples\n\njulia> uconvert(u\"nm\", 13.6u\"eV\", Spectral()) # photon wavelength needed to ionize hydrogen\n91.16485178911785 nm\n\njulia> uconvert(u\"Hz\", 589u\"nm\", Spectral(frequency=:angular)) # angular frequency of sodium D line\n3.1980501991661345e15 Hz\n\n\n\n\n\n","category":"type"},{"location":"usage/#UnitfulEquivalences.Thermal","page":"Converting between equivalent quantities","title":"UnitfulEquivalences.Thermal","text":"Thermal()\n\nEquivalence to convert between temperature and energy according to the relation E = kT, where\n\nE is the energy,\nT is the temperature and\nk is the Boltzmann constant.\n\nExample\n\njulia> uconvert(u\"eV\", 20u\"°C\", Thermal()) # room temperature is equivalent to ≈1/40 eV\n0.025261712457978588 eV\n\n\n\n\n\n","category":"type"},{"location":"usage/#API","page":"Converting between equivalent quantities","title":"API","text":"","category":"section"},{"location":"usage/#UnitfulEquivalences.Equivalence","page":"Converting between equivalent quantities","title":"UnitfulEquivalences.Equivalence","text":"Equivalence\n\nAbstract supertype for all equivalences.\n\n\n\n\n\n","category":"type"},{"location":"usage/#Unitful.uconvert","page":"Converting between equivalent quantities","title":"Unitful.uconvert","text":"uconvert(u::Units, x::Quantity, e::Equivalence)\n\nConvert x to the units u (of different dimensions) by using the specified equivalence.\n\nExamples\n\njulia> uconvert(u\"keV\", 1u\"me\", MassEnergy()) # electron rest mass is equivalent to ≈511 keV\n510.9989499961642 keV\n\njulia> uconvert(u\"eV\", 589u\"nm\", Spectral()) # photon energy of sodium D₂ line (≈589 nm)\n2.104994880020378 eV\n\n\n\n\n\n","category":"function"},{"location":"usage/#Unitful.ustrip","page":"Converting between equivalent quantities","title":"Unitful.ustrip","text":"ustrip([T::Type,] u::Units, x::Quantity, e::Equivalence)\n\nConvert x to the units u (of different dimensions) by using the specified equivalence and return the numeric value of the resulting quantity. If T is supplied, also convert the resulting number to type T.\n\nExamples\n\njulia> ustrip(u\"keV\", 1u\"me\", MassEnergy()) # electron rest mass is equivalent to ≈511 keV\n510.9989499961642\n\njulia> ustrip(u\"eV\", 589u\"nm\", Spectral()) # photon energy (in eV) of sodium D₂ line\n2.104994880020378\n\n\n\n\n\n","category":"function"},{"location":"newequivalences/#Defining-new-equivalences","page":"Defining new equivalences","title":"Defining new equivalences","text":"","category":"section"},{"location":"newequivalences/","page":"Defining new equivalences","title":"Defining new equivalences","text":"Each equivalence must be of a type that is a subtype of Equivalence. To define a new equivalence, one creates a new such type and extends the UnitfulEquivalences.edconvert function to enable conversion between the desired dimensions.","category":"page"},{"location":"newequivalences/","page":"Defining new equivalences","title":"Defining new equivalences","text":"As an example, let us implement our own version of the MassEnergy() equivalence.","category":"page"},{"location":"newequivalences/","page":"Defining new equivalences","title":"Defining new equivalences","text":"struct MyMassEnergy <: Equivalence end","category":"page"},{"location":"newequivalences/","page":"Defining new equivalences","title":"Defining new equivalences","text":"For this equivalence, a singleton struct is sufficient. In general, Equivalence types may also have fields and/or type parameters. To enable our MassEnergy type to convert between Unitful.Mass (of dimension 𝐌) and Unitful.Energy (of dimension 𝐋^2*𝐌*𝐓^-2), we need to define two edconvert methods (one for the mass-to-energy and one for the energy-to-mass conversion). The edconvert function converts a quantity (its second argument) to an equivalent quantity of the dimension specified by its first argument (the ed in edconvert stands for “equivalent dimension”). The third argument is the MyMassEnergy equivalence.","category":"page"},{"location":"newequivalences/","page":"Defining new equivalences","title":"Defining new equivalences","text":"using Unitful: 𝐋, 𝐌, 𝐓, Energy, Mass, c0\n\nUnitfulEquivalences.edconvert(::typeof(𝐋^2*𝐌*𝐓^-2), x::Mass, ::MyMassEnergy) = x * c0^2\nUnitfulEquivalences.edconvert(::typeof(𝐌), x::Energy, ::MyMassEnergy) = x / c0^2","category":"page"},{"location":"newequivalences/","page":"Defining new equivalences","title":"Defining new equivalences","text":"warning: Warning\nThis particular example implementation does not work correctly on 32-bit systems, since c0 is based on an Int and c0^2 therefore overflows on these systems (299792458^2  2^31-1).","category":"page"},{"location":"newequivalences/","page":"Defining new equivalences","title":"Defining new equivalences","text":"info: Info\nWhen defining edconvert methods for DimensionlessQuantity arguments, the equivalence will also work with plain numbers (like Float64s or Ints), even though those are not subtypes of DimensionlessQuantity. Furthermore, uconvert and ustrip convert affine quantities (like °C) to absolute quantities before calling edconvert, so edconvert only needs to work on ScalarQuantitys.","category":"page"},{"location":"newequivalences/","page":"Defining new equivalences","title":"Defining new equivalences","text":"After defining the two edconvert methods, MyMassEnergy() can be used to convert between mass and energy:","category":"page"},{"location":"newequivalences/","page":"Defining new equivalences","title":"Defining new equivalences","text":"julia> uconvert(u\"J\", 1u\"kg\", MyMassEnergy())\n89875517873681764 J","category":"page"},{"location":"newequivalences/","page":"Defining new equivalences","title":"Defining new equivalences","text":"An equivalence can have an arbitrary number of edconvert methods defined for it. For example, the Spectral equivalence can convert between energy, frequency, wavelength, and wavenumber. For each pair of these quantities, there is one pair of edconvert methods defined that handles the conversion between them.","category":"page"},{"location":"newequivalences/#Convenience-functions","page":"Defining new equivalences","title":"Convenience functions","text":"","category":"section"},{"location":"newequivalences/","page":"Defining new equivalences","title":"Defining new equivalences","text":"The definition of the edconvert methods above could be simplified in two ways:","category":"page"},{"location":"newequivalences/","page":"Defining new equivalences","title":"Defining new equivalences","text":"The UnitfulEquivalences.dimtype function extracts the Dimensions type from a quantity type like Unitful.Length. It can be used to simplify the declaration of the first edconvert argument:\nusing Unitful: Energy, Mass, c0\nusing UnitfulEquivalences: dimtype\n\nUnitfulEquivalences.edconvert(::dimtype(Energy), x::Mass, ::MyMassEnergy) = x * c0^2\nUnitfulEquivalences.edconvert(::dimtype(Mass), x::Energy, ::MyMassEnergy) = x / c0^2\nIn many cases, including this one, equivalences are simple proportional or antiproportional relations where the quotient or the product of the two equivalent quantities is a constant value (like a physical constant). In these cases, the @eqrelation macro can be used to define both edconvert methods at once. In the case of the MyMassEnergy equivalence, it would be used as follows:\nusing Unitful: Energy, Mass, c0\n\n@eqrelation MyMassEnergy Energy/Mass = c0^2\nThis defines the two edconvert methods as shown above.","category":"page"},{"location":"newequivalences/#API","page":"Defining new equivalences","title":"API","text":"","category":"section"},{"location":"newequivalences/#UnitfulEquivalences.dimtype","page":"Defining new equivalences","title":"UnitfulEquivalences.dimtype","text":"dimtype(x)\n\nFor a quantity type alias as created by Unitful.@dimension or Unitful.@derived_dimension (e.g., Unitful.Energy), return its Dimensions type. (not exported)\n\nExample\n\njulia> using UnitfulEquivalences: dimtype\n\njulia> dimtype(Unitful.Length)\nUnitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}\n\n\n\n\n\n","category":"function"},{"location":"newequivalences/#UnitfulEquivalences.edconvert","page":"Defining new equivalences","title":"UnitfulEquivalences.edconvert","text":"edconvert(d::Dimensions, x::AbstractQuantity, e::Equivalence)\n\nConvert x to the equivalent dimension d using the equivalence e. (not exported)\n\nExample\n\njulia> using UnitfulEquivalences: edconvert\n\njulia> edconvert(dimension(u\"J\"), 1u\"kg\", MassEnergy()) # E = m*c^2\n89875517873681764 kg m^2 s^-2\n\n\n\n\n\n","category":"function"},{"location":"newequivalences/#UnitfulEquivalences.@eqrelation","page":"Defining new equivalences","title":"UnitfulEquivalences.@eqrelation","text":"@eqrelation Name a/b = c\n@eqrelation Name a*b = c\n\nAdd a proportional or antiproportional relation between dimensions a and b to an existing equivalence type Name <: Equivalence. The dimensions a and b must be specified as quantity type aliases like Unitful.Energy.\n\nExample\n\nusing Unitful: Energy, Mass, c0\nstruct MassEnergy <: Equivalence end\n@eqrelation MassEnergy Energy/Mass = c0^2\n\nIn the rest frame of a particle, its energy is proportional to its mass. Defining the MassEnergy equivalence like above allows conversion between energies and masses via uconvert(massunit, energy, MassEnergy()) and uconvert(energyunit, massunit, MassEnergy()).\n\n\n\n\n\n","category":"macro"},{"location":"#UnitfulEquivalences.jl","page":"Home","title":"UnitfulEquivalences.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package extends Unitful.jl to allow conversions between equivalent quantities of different dimension, e.g., between energy and wavelength of a photon.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is compatible with Julia ≥ 1.0 and Unitful ≥ 1.0. It can be installed by typing","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add UnitfulEquivalences","category":"page"},{"location":"","page":"Home","title":"Home","text":"in the Julia REPL.","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"usage.md\", \"newequivalences.md\"]","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
